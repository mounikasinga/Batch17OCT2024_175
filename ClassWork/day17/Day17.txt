 Queue and Stack: Simple Notes

 1. Stack
 Definition: A stack is a linear data structure that follows the LIFO (Last In, First Out) principle. The last element added to the stack is the first one to be removed.
  
 Key Operations:
  1. Push: Add an element to the top of the stack.
  2. Pop: Remove the top element from the stack.
  3. Peek/Top: View the top element without removing it.
  4. IsEmpty: Check if the stack is empty.
  5. Size: Get the number of elements in the stack.
2. Queue
 Definition: A queue is a linear data structure that follows the FIFO (First In, First Out) principle. 
The first element added is the first one to be removed.

 Key Operations:
  1. Enqueue: Add an element to the rear of the queue.
  2. Dequeue: Remove an element from the front of the queue.
  3. Front: View the front element without removing it.
  4. Rear: View the last element.
  5. IsEmpty: Check if the queue is empty.
  6. Size: Get the number of elements in the queue.

 Example Use Cases:
   Task scheduling in operating systems.
   Breadthfirst search in graphs.
   Handling requests in a printer queue.
Key Differences Between Stack and Queue:

| Feature             | Stack (LIFO)                             | Queue (FIFO)                          |
| Principle        | Last In, First Out (LIFO)                | First In, First Out (FIFO)            |
| Operations       | Push, Pop, Peek, IsEmpty                | Enqueue, Dequeue, Front, IsEmpty      |
| Usage Example    | Undo functionality, Recursion, Parsing  | Task scheduling, Print queues, BFS    |
| Insertions/Removals | Insertion and removal at one end (top)  | Insertion at rear and removal at front|
Stack and Queue: Syntax 
1. Stack
•	Push Operation:
•	void push(stack *s, int value);
•	Pop Operation:
•	int pop(stack *s);
•	Peek Operation:
•	int peek(stack *s);
•	IsEmpty Operation:
•	int isEmpty(stack *s);
•	Size Operation:
•	int size(stack *s);
________________________________________
2. Queue
•	Enqueue Operation:
•	void enqueue(queue *q, int value);
•	Dequeue Operation:
•	int dequeue(queue *q);
•	Front Operation:
•	int front(queue *q);
•	Rear Operation:
•	int rear(queue *q);
•	IsEmpty Operation:
•	int isEmpty(queue *q);
•	Size Operation:
•	int size(queue *q);
________________________________________
Key Data Structure Declarations
Stack (Array-based) Declaration:
#define MAX 5
int stack[MAX];
int top = -1;
Queue (Array-based) Declaration:
#define MAX 5
int queue[MAX];
int front = -1, rear = -1;
________________________________________
Memory Allocation for Dynamic Stack or Queue (Pointers)
Stack:
stack *s = (stack *)malloc(sizeof(stack));
Queue:
queue *q = (queue *)malloc(sizeof(queue));

